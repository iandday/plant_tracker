/* tslint:disable */
/* eslint-disable */
/**
 * Book Store API
 * Book Store API for renting books and notifying available/returned books in a store
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { DeleteStatus } from '../models';
// @ts-ignore
import { LocationIn } from '../models';
// @ts-ignore
import { LocationOut } from '../models';
// @ts-ignore
import { LocationPatch } from '../models';
/**
 * LocationApi - axios parameter creator
 * @export
 */
export const LocationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Location
         * @summary Patch Location
         * @param {string} locationId 
         * @param {LocationPatch} locationPatch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationPatchLocation: async (locationId: string, locationPatch: LocationPatch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('locationPatchLocation', 'locationId', locationId)
            // verify required parameter 'locationPatch' is not null or undefined
            assertParamExists('locationPatchLocation', 'locationPatch', locationPatch)
            const localVarPath = `/api/location/{location_id}`
                .replace(`{${"location_id"}}`, encodeURIComponent(String(locationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(locationPatch, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Location
         * @summary Create Location
         * @param {LocationIn} locationIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewLocationCreateLocation: async (locationIn: LocationIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationIn' is not null or undefined
            assertParamExists('trackerApiViewLocationCreateLocation', 'locationIn', locationIn)
            const localVarPath = `/api/location/location`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(locationIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Location
         * @summary Delete Location
         * @param {string} locationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewLocationDeleteLocation: async (locationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('trackerApiViewLocationDeleteLocation', 'locationId', locationId)
            const localVarPath = `/api/location/{location_id}`
                .replace(`{${"location_id"}}`, encodeURIComponent(String(locationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Location
         * @summary Get Location
         * @param {string} locationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewLocationGetLocation: async (locationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('trackerApiViewLocationGetLocation', 'locationId', locationId)
            const localVarPath = `/api/location/{location_id}`
                .replace(`{${"location_id"}}`, encodeURIComponent(String(locationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Location
         * @summary List Locations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewLocationListLocations: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/location/location`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocationApi - functional programming interface
 * @export
 */
export const LocationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LocationApiAxiosParamCreator(configuration)
    return {
        /**
         * Location
         * @summary Patch Location
         * @param {string} locationId 
         * @param {LocationPatch} locationPatch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async locationPatchLocation(locationId: string, locationPatch: LocationPatch, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.locationPatchLocation(locationId, locationPatch, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LocationApi.locationPatchLocation']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Location
         * @summary Create Location
         * @param {LocationIn} locationIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackerApiViewLocationCreateLocation(locationIn: LocationIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackerApiViewLocationCreateLocation(locationIn, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LocationApi.trackerApiViewLocationCreateLocation']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Location
         * @summary Delete Location
         * @param {string} locationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackerApiViewLocationDeleteLocation(locationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackerApiViewLocationDeleteLocation(locationId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LocationApi.trackerApiViewLocationDeleteLocation']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Location
         * @summary Get Location
         * @param {string} locationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackerApiViewLocationGetLocation(locationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackerApiViewLocationGetLocation(locationId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LocationApi.trackerApiViewLocationGetLocation']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Location
         * @summary List Locations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackerApiViewLocationListLocations(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LocationOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackerApiViewLocationListLocations(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LocationApi.trackerApiViewLocationListLocations']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * LocationApi - factory interface
 * @export
 */
export const LocationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LocationApiFp(configuration)
    return {
        /**
         * Location
         * @summary Patch Location
         * @param {string} locationId 
         * @param {LocationPatch} locationPatch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationPatchLocation(locationId: string, locationPatch: LocationPatch, options?: any): AxiosPromise<LocationOut> {
            return localVarFp.locationPatchLocation(locationId, locationPatch, options).then((request) => request(axios, basePath));
        },
        /**
         * Location
         * @summary Create Location
         * @param {LocationIn} locationIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewLocationCreateLocation(locationIn: LocationIn, options?: any): AxiosPromise<LocationOut> {
            return localVarFp.trackerApiViewLocationCreateLocation(locationIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Location
         * @summary Delete Location
         * @param {string} locationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewLocationDeleteLocation(locationId: string, options?: any): AxiosPromise<DeleteStatus> {
            return localVarFp.trackerApiViewLocationDeleteLocation(locationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Location
         * @summary Get Location
         * @param {string} locationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewLocationGetLocation(locationId: string, options?: any): AxiosPromise<LocationOut> {
            return localVarFp.trackerApiViewLocationGetLocation(locationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Location
         * @summary List Locations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewLocationListLocations(options?: any): AxiosPromise<Array<LocationOut>> {
            return localVarFp.trackerApiViewLocationListLocations(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LocationApi - object-oriented interface
 * @export
 * @class LocationApi
 * @extends {BaseAPI}
 */
export class LocationApi extends BaseAPI {
    /**
     * Location
     * @summary Patch Location
     * @param {string} locationId 
     * @param {LocationPatch} locationPatch 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApi
     */
    public locationPatchLocation(locationId: string, locationPatch: LocationPatch, options?: AxiosRequestConfig) {
        return LocationApiFp(this.configuration).locationPatchLocation(locationId, locationPatch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Location
     * @summary Create Location
     * @param {LocationIn} locationIn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApi
     */
    public trackerApiViewLocationCreateLocation(locationIn: LocationIn, options?: AxiosRequestConfig) {
        return LocationApiFp(this.configuration).trackerApiViewLocationCreateLocation(locationIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Location
     * @summary Delete Location
     * @param {string} locationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApi
     */
    public trackerApiViewLocationDeleteLocation(locationId: string, options?: AxiosRequestConfig) {
        return LocationApiFp(this.configuration).trackerApiViewLocationDeleteLocation(locationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Location
     * @summary Get Location
     * @param {string} locationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApi
     */
    public trackerApiViewLocationGetLocation(locationId: string, options?: AxiosRequestConfig) {
        return LocationApiFp(this.configuration).trackerApiViewLocationGetLocation(locationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Location
     * @summary List Locations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApi
     */
    public trackerApiViewLocationListLocations(options?: AxiosRequestConfig) {
        return LocationApiFp(this.configuration).trackerApiViewLocationListLocations(options).then((request) => request(this.axios, this.basePath));
    }
}

