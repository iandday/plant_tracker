/* tslint:disable */
/* eslint-disable */
/**
 * Plant Tracker API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { Plant } from '../models';
// @ts-ignore
import { PlantCreateTrefle } from '../models';
// @ts-ignore
import { PlantSearchResultsTrefle } from '../models';
// @ts-ignore
import { PlantSearchTrefle } from '../models';
/**
 * TrefleApi - axios parameter creator
 * @export
 */
export const TrefleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a plant entry using data from Trefle
         * @summary Create Plant Trefle
         * @param {PlantCreateTrefle} plantCreateTrefle 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlantTreflePlantTrefleCreatePost: async (plantCreateTrefle: PlantCreateTrefle, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'plantCreateTrefle' is not null or undefined
            assertParamExists('createPlantTreflePlantTrefleCreatePost', 'plantCreateTrefle', plantCreateTrefle)
            const localVarPath = `/plant/trefle/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(plantCreateTrefle, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for plant data from Trefle
         * @summary Search Plant Trefle
         * @param {PlantSearchTrefle} plantSearchTrefle 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPlantTreflePlantTrefleSearchPost: async (plantSearchTrefle: PlantSearchTrefle, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'plantSearchTrefle' is not null or undefined
            assertParamExists('searchPlantTreflePlantTrefleSearchPost', 'plantSearchTrefle', plantSearchTrefle)
            const localVarPath = `/plant/trefle/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(plantSearchTrefle, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TrefleApi - functional programming interface
 * @export
 */
export const TrefleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TrefleApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a plant entry using data from Trefle
         * @summary Create Plant Trefle
         * @param {PlantCreateTrefle} plantCreateTrefle 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPlantTreflePlantTrefleCreatePost(plantCreateTrefle: PlantCreateTrefle, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Plant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPlantTreflePlantTrefleCreatePost(plantCreateTrefle, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TrefleApi.createPlantTreflePlantTrefleCreatePost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Search for plant data from Trefle
         * @summary Search Plant Trefle
         * @param {PlantSearchTrefle} plantSearchTrefle 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchPlantTreflePlantTrefleSearchPost(plantSearchTrefle: PlantSearchTrefle, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PlantSearchResultsTrefle>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchPlantTreflePlantTrefleSearchPost(plantSearchTrefle, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TrefleApi.searchPlantTreflePlantTrefleSearchPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * TrefleApi - factory interface
 * @export
 */
export const TrefleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TrefleApiFp(configuration)
    return {
        /**
         * Create a plant entry using data from Trefle
         * @summary Create Plant Trefle
         * @param {PlantCreateTrefle} plantCreateTrefle 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlantTreflePlantTrefleCreatePost(plantCreateTrefle: PlantCreateTrefle, options?: any): AxiosPromise<Plant> {
            return localVarFp.createPlantTreflePlantTrefleCreatePost(plantCreateTrefle, options).then((request) => request(axios, basePath));
        },
        /**
         * Search for plant data from Trefle
         * @summary Search Plant Trefle
         * @param {PlantSearchTrefle} plantSearchTrefle 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPlantTreflePlantTrefleSearchPost(plantSearchTrefle: PlantSearchTrefle, options?: any): AxiosPromise<Array<PlantSearchResultsTrefle>> {
            return localVarFp.searchPlantTreflePlantTrefleSearchPost(plantSearchTrefle, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TrefleApi - object-oriented interface
 * @export
 * @class TrefleApi
 * @extends {BaseAPI}
 */
export class TrefleApi extends BaseAPI {
    /**
     * Create a plant entry using data from Trefle
     * @summary Create Plant Trefle
     * @param {PlantCreateTrefle} plantCreateTrefle 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrefleApi
     */
    public createPlantTreflePlantTrefleCreatePost(plantCreateTrefle: PlantCreateTrefle, options?: AxiosRequestConfig) {
        return TrefleApiFp(this.configuration).createPlantTreflePlantTrefleCreatePost(plantCreateTrefle, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search for plant data from Trefle
     * @summary Search Plant Trefle
     * @param {PlantSearchTrefle} plantSearchTrefle 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrefleApi
     */
    public searchPlantTreflePlantTrefleSearchPost(plantSearchTrefle: PlantSearchTrefle, options?: AxiosRequestConfig) {
        return TrefleApiFp(this.configuration).searchPlantTreflePlantTrefleSearchPost(plantSearchTrefle, options).then((request) => request(this.axios, this.basePath));
    }
}

