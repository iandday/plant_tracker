/* tslint:disable */
/* eslint-disable */
/**
 * Plant Tracker API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { Area } from '../models';
// @ts-ignore
import { AreaCreate } from '../models';
// @ts-ignore
import { AreaPatch } from '../models';
// @ts-ignore
import { AreaReturn } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { ItemDelete } from '../models';
/**
 * AreaApi - axios parameter creator
 * @export
 */
export const AreaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Area
         * @param {AreaCreate} areaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAreaAreaPost: async (areaCreate: AreaCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'areaCreate' is not null or undefined
            assertParamExists('createAreaAreaPost', 'areaCreate', areaCreate)
            const localVarPath = `/area`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "JWT", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(areaCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Area
         * @param {string} areaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAreaAreaAreaIdDelete: async (areaId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'areaId' is not null or undefined
            assertParamExists('deleteAreaAreaAreaIdDelete', 'areaId', areaId)
            const localVarPath = `/area/{area_id}`
                .replace(`{${"area_id"}}`, encodeURIComponent(String(areaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "JWT", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Area
         * @param {string} areaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAreaAreaAreaIdGet: async (areaId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'areaId' is not null or undefined
            assertParamExists('getAreaAreaAreaIdGet', 'areaId', areaId)
            const localVarPath = `/area/{area_id}`
                .replace(`{${"area_id"}}`, encodeURIComponent(String(areaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "JWT", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Areas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAreasAreaGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/area`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "JWT", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Area
         * @param {string} areaId 
         * @param {AreaPatch} areaPatch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAreaAreaAreaIdPatch: async (areaId: string, areaPatch: AreaPatch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'areaId' is not null or undefined
            assertParamExists('updateAreaAreaAreaIdPatch', 'areaId', areaId)
            // verify required parameter 'areaPatch' is not null or undefined
            assertParamExists('updateAreaAreaAreaIdPatch', 'areaPatch', areaPatch)
            const localVarPath = `/area/{area_id}`
                .replace(`{${"area_id"}}`, encodeURIComponent(String(areaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "JWT", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(areaPatch, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AreaApi - functional programming interface
 * @export
 */
export const AreaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AreaApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Area
         * @param {AreaCreate} areaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAreaAreaPost(areaCreate: AreaCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Area>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAreaAreaPost(areaCreate, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AreaApi.createAreaAreaPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Area
         * @param {string} areaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAreaAreaAreaIdDelete(areaId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemDelete>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAreaAreaAreaIdDelete(areaId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AreaApi.deleteAreaAreaAreaIdDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Area
         * @param {string} areaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAreaAreaAreaIdGet(areaId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Area>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAreaAreaAreaIdGet(areaId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AreaApi.getAreaAreaAreaIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Areas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAreasAreaGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AreaReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAreasAreaGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AreaApi.getAreasAreaGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Update Area
         * @param {string} areaId 
         * @param {AreaPatch} areaPatch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAreaAreaAreaIdPatch(areaId: string, areaPatch: AreaPatch, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Area>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAreaAreaAreaIdPatch(areaId, areaPatch, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AreaApi.updateAreaAreaAreaIdPatch']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * AreaApi - factory interface
 * @export
 */
export const AreaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AreaApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Area
         * @param {AreaCreate} areaCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAreaAreaPost(areaCreate: AreaCreate, options?: any): AxiosPromise<Area> {
            return localVarFp.createAreaAreaPost(areaCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Area
         * @param {string} areaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAreaAreaAreaIdDelete(areaId: string, options?: any): AxiosPromise<ItemDelete> {
            return localVarFp.deleteAreaAreaAreaIdDelete(areaId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Area
         * @param {string} areaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAreaAreaAreaIdGet(areaId: string, options?: any): AxiosPromise<Area> {
            return localVarFp.getAreaAreaAreaIdGet(areaId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Areas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAreasAreaGet(options?: any): AxiosPromise<AreaReturn> {
            return localVarFp.getAreasAreaGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Area
         * @param {string} areaId 
         * @param {AreaPatch} areaPatch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAreaAreaAreaIdPatch(areaId: string, areaPatch: AreaPatch, options?: any): AxiosPromise<Area> {
            return localVarFp.updateAreaAreaAreaIdPatch(areaId, areaPatch, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AreaApi - object-oriented interface
 * @export
 * @class AreaApi
 * @extends {BaseAPI}
 */
export class AreaApi extends BaseAPI {
    /**
     * 
     * @summary Create Area
     * @param {AreaCreate} areaCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AreaApi
     */
    public createAreaAreaPost(areaCreate: AreaCreate, options?: AxiosRequestConfig) {
        return AreaApiFp(this.configuration).createAreaAreaPost(areaCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Area
     * @param {string} areaId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AreaApi
     */
    public deleteAreaAreaAreaIdDelete(areaId: string, options?: AxiosRequestConfig) {
        return AreaApiFp(this.configuration).deleteAreaAreaAreaIdDelete(areaId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Area
     * @param {string} areaId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AreaApi
     */
    public getAreaAreaAreaIdGet(areaId: string, options?: AxiosRequestConfig) {
        return AreaApiFp(this.configuration).getAreaAreaAreaIdGet(areaId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Areas
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AreaApi
     */
    public getAreasAreaGet(options?: AxiosRequestConfig) {
        return AreaApiFp(this.configuration).getAreasAreaGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Area
     * @param {string} areaId 
     * @param {AreaPatch} areaPatch 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AreaApi
     */
    public updateAreaAreaAreaIdPatch(areaId: string, areaPatch: AreaPatch, options?: AxiosRequestConfig) {
        return AreaApiFp(this.configuration).updateAreaAreaAreaIdPatch(areaId, areaPatch, options).then((request) => request(this.axios, this.basePath));
    }
}

