/* tslint:disable */
/* eslint-disable */
/**
 * Book Store API
 * Book Store API for renting books and notifying available/returned books in a store
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { DeleteStatus } from '../models';
// @ts-ignore
import { EntryOut } from '../models';
/**
 * EntryApi - axios parameter creator
 * @export
 */
export const EntryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Entry
         * @summary Create Entry
         * @param {string} timestamp 
         * @param {Array<string>} activities 
         * @param {string} plantId 
         * @param {string | null} [notes] 
         * @param {number | null} [plantHealth] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewEntryCreateEntry: async (timestamp: string, activities: Array<string>, plantId: string, notes?: string | null, plantHealth?: number | null, file?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('trackerApiViewEntryCreateEntry', 'timestamp', timestamp)
            // verify required parameter 'activities' is not null or undefined
            assertParamExists('trackerApiViewEntryCreateEntry', 'activities', activities)
            // verify required parameter 'plantId' is not null or undefined
            assertParamExists('trackerApiViewEntryCreateEntry', 'plantId', plantId)
            const localVarPath = `/api/entry/entry`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (timestamp !== undefined) { 
                localVarFormParams.append('Timestamp', timestamp as any);
            }
                if (activities) {
                localVarFormParams.append('activities', activities.join(COLLECTION_FORMATS.csv));
            }

    
            if (plantId !== undefined) { 
                localVarFormParams.append('plant_id', plantId as any);
            }
    
            if (notes !== undefined) { 
                localVarFormParams.append('notes', notes as any);
            }
    
            if (plantHealth !== undefined) { 
                localVarFormParams.append('plant_health', plantHealth as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Entry
         * @summary Delete Entry
         * @param {string} entryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewEntryDeleteEntry: async (entryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('trackerApiViewEntryDeleteEntry', 'entryId', entryId)
            const localVarPath = `/api/entry/{entry_id}`
                .replace(`{${"entry_id"}}`, encodeURIComponent(String(entryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Entry
         * @summary Get Entry
         * @param {string} entryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewEntryGetEntry: async (entryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('trackerApiViewEntryGetEntry', 'entryId', entryId)
            const localVarPath = `/api/entry/{entry_id}`
                .replace(`{${"entry_id"}}`, encodeURIComponent(String(entryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Entry
         * @summary Get Plant Entries
         * @param {string} plantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewEntryGetPlantEntries: async (plantId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'plantId' is not null or undefined
            assertParamExists('trackerApiViewEntryGetPlantEntries', 'plantId', plantId)
            const localVarPath = `/api/entry/plant/{plant_id}`
                .replace(`{${"plant_id"}}`, encodeURIComponent(String(plantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Entry
         * @summary List Entries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewEntryListEntries: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/entry/entry`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EntryApi - functional programming interface
 * @export
 */
export const EntryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EntryApiAxiosParamCreator(configuration)
    return {
        /**
         * Entry
         * @summary Create Entry
         * @param {string} timestamp 
         * @param {Array<string>} activities 
         * @param {string} plantId 
         * @param {string | null} [notes] 
         * @param {number | null} [plantHealth] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackerApiViewEntryCreateEntry(timestamp: string, activities: Array<string>, plantId: string, notes?: string | null, plantHealth?: number | null, file?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntryOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackerApiViewEntryCreateEntry(timestamp, activities, plantId, notes, plantHealth, file, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EntryApi.trackerApiViewEntryCreateEntry']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Entry
         * @summary Delete Entry
         * @param {string} entryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackerApiViewEntryDeleteEntry(entryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackerApiViewEntryDeleteEntry(entryId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EntryApi.trackerApiViewEntryDeleteEntry']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Entry
         * @summary Get Entry
         * @param {string} entryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackerApiViewEntryGetEntry(entryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntryOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackerApiViewEntryGetEntry(entryId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EntryApi.trackerApiViewEntryGetEntry']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Entry
         * @summary Get Plant Entries
         * @param {string} plantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackerApiViewEntryGetPlantEntries(plantId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EntryOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackerApiViewEntryGetPlantEntries(plantId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EntryApi.trackerApiViewEntryGetPlantEntries']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Entry
         * @summary List Entries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackerApiViewEntryListEntries(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EntryOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackerApiViewEntryListEntries(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EntryApi.trackerApiViewEntryListEntries']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * EntryApi - factory interface
 * @export
 */
export const EntryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EntryApiFp(configuration)
    return {
        /**
         * Entry
         * @summary Create Entry
         * @param {string} timestamp 
         * @param {Array<string>} activities 
         * @param {string} plantId 
         * @param {string | null} [notes] 
         * @param {number | null} [plantHealth] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewEntryCreateEntry(timestamp: string, activities: Array<string>, plantId: string, notes?: string | null, plantHealth?: number | null, file?: File, options?: any): AxiosPromise<EntryOut> {
            return localVarFp.trackerApiViewEntryCreateEntry(timestamp, activities, plantId, notes, plantHealth, file, options).then((request) => request(axios, basePath));
        },
        /**
         * Entry
         * @summary Delete Entry
         * @param {string} entryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewEntryDeleteEntry(entryId: string, options?: any): AxiosPromise<DeleteStatus> {
            return localVarFp.trackerApiViewEntryDeleteEntry(entryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Entry
         * @summary Get Entry
         * @param {string} entryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewEntryGetEntry(entryId: string, options?: any): AxiosPromise<EntryOut> {
            return localVarFp.trackerApiViewEntryGetEntry(entryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Entry
         * @summary Get Plant Entries
         * @param {string} plantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewEntryGetPlantEntries(plantId: string, options?: any): AxiosPromise<Array<EntryOut>> {
            return localVarFp.trackerApiViewEntryGetPlantEntries(plantId, options).then((request) => request(axios, basePath));
        },
        /**
         * Entry
         * @summary List Entries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackerApiViewEntryListEntries(options?: any): AxiosPromise<Array<EntryOut>> {
            return localVarFp.trackerApiViewEntryListEntries(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EntryApi - object-oriented interface
 * @export
 * @class EntryApi
 * @extends {BaseAPI}
 */
export class EntryApi extends BaseAPI {
    /**
     * Entry
     * @summary Create Entry
     * @param {string} timestamp 
     * @param {Array<string>} activities 
     * @param {string} plantId 
     * @param {string | null} [notes] 
     * @param {number | null} [plantHealth] 
     * @param {File} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntryApi
     */
    public trackerApiViewEntryCreateEntry(timestamp: string, activities: Array<string>, plantId: string, notes?: string | null, plantHealth?: number | null, file?: File, options?: AxiosRequestConfig) {
        return EntryApiFp(this.configuration).trackerApiViewEntryCreateEntry(timestamp, activities, plantId, notes, plantHealth, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Entry
     * @summary Delete Entry
     * @param {string} entryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntryApi
     */
    public trackerApiViewEntryDeleteEntry(entryId: string, options?: AxiosRequestConfig) {
        return EntryApiFp(this.configuration).trackerApiViewEntryDeleteEntry(entryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Entry
     * @summary Get Entry
     * @param {string} entryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntryApi
     */
    public trackerApiViewEntryGetEntry(entryId: string, options?: AxiosRequestConfig) {
        return EntryApiFp(this.configuration).trackerApiViewEntryGetEntry(entryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Entry
     * @summary Get Plant Entries
     * @param {string} plantId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntryApi
     */
    public trackerApiViewEntryGetPlantEntries(plantId: string, options?: AxiosRequestConfig) {
        return EntryApiFp(this.configuration).trackerApiViewEntryGetPlantEntries(plantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Entry
     * @summary List Entries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntryApi
     */
    public trackerApiViewEntryListEntries(options?: AxiosRequestConfig) {
        return EntryApiFp(this.configuration).trackerApiViewEntryListEntries(options).then((request) => request(this.axios, this.basePath));
    }
}

