/* tslint:disable */
/* eslint-disable */
/**
 * Plant Tracker API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { Entry } from '../models';
// @ts-ignore
import { EntryCreate } from '../models';
// @ts-ignore
import { EntryPatch } from '../models';
// @ts-ignore
import { EntryReturn } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { ItemDelete } from '../models';
/**
 * EntryApi - axios parameter creator
 * @export
 */
export const EntryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Entry
         * @param {EntryCreate} entryCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntryEntryPost: async (entryCreate: EntryCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entryCreate' is not null or undefined
            assertParamExists('createEntryEntryPost', 'entryCreate', entryCreate)
            const localVarPath = `/entry`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "JWT", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(entryCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Entry
         * @param {string} entryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntryEntryEntryIdDelete: async (entryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('deleteEntryEntryEntryIdDelete', 'entryId', entryId)
            const localVarPath = `/entry/{entry_id}`
                .replace(`{${"entry_id"}}`, encodeURIComponent(String(entryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "JWT", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Entries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntriesEntryGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/entry`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "JWT", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Entry
         * @param {string} entryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntryEntryEntryIdGet: async (entryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('getEntryEntryEntryIdGet', 'entryId', entryId)
            const localVarPath = `/entry/{entry_id}`
                .replace(`{${"entry_id"}}`, encodeURIComponent(String(entryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "JWT", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Entry
         * @param {string} entryId 
         * @param {EntryPatch} entryPatch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntryEntryEntryIdPatch: async (entryId: string, entryPatch: EntryPatch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('updateEntryEntryEntryIdPatch', 'entryId', entryId)
            // verify required parameter 'entryPatch' is not null or undefined
            assertParamExists('updateEntryEntryEntryIdPatch', 'entryPatch', entryPatch)
            const localVarPath = `/entry/{entry_id}`
                .replace(`{${"entry_id"}}`, encodeURIComponent(String(entryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "JWT", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(entryPatch, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EntryApi - functional programming interface
 * @export
 */
export const EntryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EntryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Entry
         * @param {EntryCreate} entryCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEntryEntryPost(entryCreate: EntryCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Entry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEntryEntryPost(entryCreate, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EntryApi.createEntryEntryPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Entry
         * @param {string} entryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEntryEntryEntryIdDelete(entryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemDelete>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEntryEntryEntryIdDelete(entryId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EntryApi.deleteEntryEntryEntryIdDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Entries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntriesEntryGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntryReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntriesEntryGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EntryApi.getEntriesEntryGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Entry
         * @param {string} entryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntryEntryEntryIdGet(entryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Entry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntryEntryEntryIdGet(entryId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EntryApi.getEntryEntryEntryIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Update Entry
         * @param {string} entryId 
         * @param {EntryPatch} entryPatch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEntryEntryEntryIdPatch(entryId: string, entryPatch: EntryPatch, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Entry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEntryEntryEntryIdPatch(entryId, entryPatch, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EntryApi.updateEntryEntryEntryIdPatch']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * EntryApi - factory interface
 * @export
 */
export const EntryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EntryApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Entry
         * @param {EntryCreate} entryCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntryEntryPost(entryCreate: EntryCreate, options?: any): AxiosPromise<Entry> {
            return localVarFp.createEntryEntryPost(entryCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Entry
         * @param {string} entryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntryEntryEntryIdDelete(entryId: string, options?: any): AxiosPromise<ItemDelete> {
            return localVarFp.deleteEntryEntryEntryIdDelete(entryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Entries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntriesEntryGet(options?: any): AxiosPromise<EntryReturn> {
            return localVarFp.getEntriesEntryGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Entry
         * @param {string} entryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntryEntryEntryIdGet(entryId: string, options?: any): AxiosPromise<Entry> {
            return localVarFp.getEntryEntryEntryIdGet(entryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Entry
         * @param {string} entryId 
         * @param {EntryPatch} entryPatch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntryEntryEntryIdPatch(entryId: string, entryPatch: EntryPatch, options?: any): AxiosPromise<Entry> {
            return localVarFp.updateEntryEntryEntryIdPatch(entryId, entryPatch, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EntryApi - object-oriented interface
 * @export
 * @class EntryApi
 * @extends {BaseAPI}
 */
export class EntryApi extends BaseAPI {
    /**
     * 
     * @summary Create Entry
     * @param {EntryCreate} entryCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntryApi
     */
    public createEntryEntryPost(entryCreate: EntryCreate, options?: AxiosRequestConfig) {
        return EntryApiFp(this.configuration).createEntryEntryPost(entryCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Entry
     * @param {string} entryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntryApi
     */
    public deleteEntryEntryEntryIdDelete(entryId: string, options?: AxiosRequestConfig) {
        return EntryApiFp(this.configuration).deleteEntryEntryEntryIdDelete(entryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Entries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntryApi
     */
    public getEntriesEntryGet(options?: AxiosRequestConfig) {
        return EntryApiFp(this.configuration).getEntriesEntryGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Entry
     * @param {string} entryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntryApi
     */
    public getEntryEntryEntryIdGet(entryId: string, options?: AxiosRequestConfig) {
        return EntryApiFp(this.configuration).getEntryEntryEntryIdGet(entryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Entry
     * @param {string} entryId 
     * @param {EntryPatch} entryPatch 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntryApi
     */
    public updateEntryEntryEntryIdPatch(entryId: string, entryPatch: EntryPatch, options?: AxiosRequestConfig) {
        return EntryApiFp(this.configuration).updateEntryEntryEntryIdPatch(entryId, entryPatch, options).then((request) => request(this.axios, this.basePath));
    }
}

