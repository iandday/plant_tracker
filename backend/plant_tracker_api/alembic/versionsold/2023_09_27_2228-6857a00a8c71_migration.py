"""migration

Revision ID: 6857a00a8c71
Revises: 27aaac9663da
Create Date: 2023-09-27 22:28:41.749474

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '6857a00a8c71'
down_revision: Union[str, None] = '27aaac9663da'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('source',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('url', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_source_id'), 'source', ['id'], unique=False)
    op.create_table('plant_source',
    sa.Column('plant_id', sa.UUID(), nullable=False),
    sa.Column('source_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['plant_id'], ['plant.id'], ),
    sa.ForeignKeyConstraint(['source_id'], ['source.id'], ),
    sa.PrimaryKeyConstraint('plant_id', 'source_id')
    )
    op.drop_table('plant_common_name')
    op.drop_table('plant_pruning_month')
    op.drop_index('ix_other_name_id', table_name='other_name')
    op.drop_table('other_name')
    op.drop_index('ix_scientific_name_id', table_name='scientific_name')
    op.drop_table('scientific_name')
    op.drop_table('plant_propagation')
    op.drop_table('plant_sunlight')
    op.drop_table('plant_scientific_name')
    op.drop_index('ix_common_name_id', table_name='common_name')
    op.drop_table('common_name')
    op.drop_index('ix_propagation_id', table_name='propagation')
    op.drop_table('propagation')
    op.drop_index('ix_pruning_month_id', table_name='pruning_month')
    op.drop_table('pruning_month')
    op.drop_table('plant_other_name')
    op.drop_index('ix_sunlight_id', table_name='sunlight')
    op.drop_table('sunlight')
    op.add_column('plant', sa.Column('common_name', sa.String(), nullable=True))
    op.add_column('plant', sa.Column('scientific_name', sa.String(), nullable=True))
    op.drop_column('plant', 'pruning_interval')
    op.drop_column('plant', 'pruning_amount')
    op.drop_column('plant', 'watering_period')
    op.drop_column('plant', 'watering_benchmark')
    op.drop_column('plant', 'cycle')
    op.drop_column('plant', 'plant_type')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('plant', sa.Column('plant_type', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('plant', sa.Column('cycle', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('plant', sa.Column('watering_benchmark', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('plant', sa.Column('watering_period', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('plant', sa.Column('pruning_amount', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('plant', sa.Column('pruning_interval', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_column('plant', 'scientific_name')
    op.drop_column('plant', 'common_name')
    op.create_table('sunlight',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('method', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='sunlight_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_sunlight_id', 'sunlight', ['id'], unique=False)
    op.create_table('plant_other_name',
    sa.Column('plant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('other_name_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['other_name_id'], ['other_name.id'], name='plant_other_name_other_name_id_fkey'),
    sa.ForeignKeyConstraint(['plant_id'], ['plant.id'], name='plant_other_name_plant_id_fkey'),
    sa.PrimaryKeyConstraint('plant_id', 'other_name_id', name='plant_other_name_pkey')
    )
    op.create_table('pruning_month',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('month', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='pruning_month_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_pruning_month_id', 'pruning_month', ['id'], unique=False)
    op.create_table('propagation',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('method', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='propagation_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_propagation_id', 'propagation', ['id'], unique=False)
    op.create_table('common_name',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='common_name_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_common_name_id', 'common_name', ['id'], unique=False)
    op.create_table('plant_scientific_name',
    sa.Column('plant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('scientific_name_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['plant_id'], ['plant.id'], name='plant_scientific_name_plant_id_fkey'),
    sa.ForeignKeyConstraint(['scientific_name_id'], ['scientific_name.id'], name='plant_scientific_name_scientific_name_id_fkey'),
    sa.PrimaryKeyConstraint('plant_id', 'scientific_name_id', name='plant_scientific_name_pkey')
    )
    op.create_table('plant_sunlight',
    sa.Column('plant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('sunlight_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['plant_id'], ['plant.id'], name='plant_sunlight_plant_id_fkey'),
    sa.ForeignKeyConstraint(['sunlight_id'], ['sunlight.id'], name='plant_sunlight_sunlight_id_fkey'),
    sa.PrimaryKeyConstraint('plant_id', 'sunlight_id', name='plant_sunlight_pkey')
    )
    op.create_table('plant_propagation',
    sa.Column('plant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('propagation_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['plant_id'], ['plant.id'], name='plant_propagation_plant_id_fkey'),
    sa.ForeignKeyConstraint(['propagation_id'], ['propagation.id'], name='plant_propagation_propagation_id_fkey'),
    sa.PrimaryKeyConstraint('plant_id', 'propagation_id', name='plant_propagation_pkey')
    )
    op.create_table('scientific_name',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='scientific_name_pkey')
    )
    op.create_index('ix_scientific_name_id', 'scientific_name', ['id'], unique=False)
    op.create_table('other_name',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='other_name_pkey')
    )
    op.create_index('ix_other_name_id', 'other_name', ['id'], unique=False)
    op.create_table('plant_pruning_month',
    sa.Column('plant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('pruning_month_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['plant_id'], ['plant.id'], name='plant_pruning_month_plant_id_fkey'),
    sa.ForeignKeyConstraint(['pruning_month_id'], ['pruning_month.id'], name='plant_pruning_month_pruning_month_id_fkey'),
    sa.PrimaryKeyConstraint('plant_id', 'pruning_month_id', name='plant_pruning_month_pkey')
    )
    op.create_table('plant_common_name',
    sa.Column('plant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('common_name_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['common_name_id'], ['common_name.id'], name='plant_common_name_common_name_id_fkey'),
    sa.ForeignKeyConstraint(['plant_id'], ['plant.id'], name='plant_common_name_plant_id_fkey'),
    sa.PrimaryKeyConstraint('plant_id', 'common_name_id', name='plant_common_name_pkey')
    )
    op.drop_table('plant_source')
    op.drop_index(op.f('ix_source_id'), table_name='source')
    op.drop_table('source')
    # ### end Alembic commands ###
